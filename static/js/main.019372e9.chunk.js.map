{"version":3,"sources":["components/Pagination.js","components/Mod.js","assets/Spin1.gif","App.js","reportWebVitals.js","index.js"],"names":["Pagination","setPageSlice","showPerPage","empData","useState","counter","setCounter","useEffect","value","start","end","handleCounter","e","target","name","Math","ceil","length","className","onClick","Mod","handleSubmit","show","setShow","addName","addEmail","addPosition","AddInput","setAddInput","isDataBlank","setIsDataBlank","handleInputChange","console","log","handleClose","Button","variant","Modal","onHide","backdrop","keyboard","Header","closeButton","Title","Body","class","for","type","placeholder","onChange","Footer","trim","App","setEmpData","isLoading","setIsLoading","pageSlice","fetch","then","response","json","result","src","spinner","alt","scope","slice","map","id","Name","Email","Position","email","position","data","method","headers","Accept","body","JSON","stringify","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.019372e9.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Pagination({ setPageSlice, showPerPage, empData }) {\r\n  const [counter, setCounter] = useState(1);\r\n\r\n  useEffect(() => {\r\n    const value = showPerPage * counter;\r\n    setPageSlice({ start: value - showPerPage, end: value });\r\n  }, [counter]);\r\n\r\n  const handleCounter = (e) => {\r\n    const name = e.target.name;\r\n    if (name === \"next\") {\r\n      if (counter < Math.ceil(empData.length / showPerPage))\r\n        setCounter(counter + 1);\r\n    } else {\r\n      if (counter === 1) setCounter(1);\r\n      else setCounter(counter - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"my-5 d-flex justify-content-between\">\r\n      <button className=\"btn btn-primary\" name=\"prev\" onClick={handleCounter}>\r\n        {`<<`}\r\n      </button>\r\n      <button className=\"btn btn-primary\" name=\"next\" onClick={handleCounter}>\r\n        {`>>`}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pagination;\r\n","import { Button, Modal } from \"react-bootstrap\";\r\nimport React, { useState } from \"react\";\r\n\r\nfunction Mod({ handleSubmit }) {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const [AddInput, setAddInput] = useState({\r\n    addName: \"\",\r\n    addEmail: \"\",\r\n    addPosition: \"\",\r\n  });\r\n\r\n  const [isDataBlank, setIsDataBlank] = useState(false);\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n\r\n    if (name === \"iname\") setAddInput({ ...AddInput, addName: value });\r\n    else if (name === \"imail\") setAddInput({ ...AddInput, addEmail: value });\r\n    else setAddInput({ ...AddInput, addPosition: value });\r\n    console.log(AddInput);\r\n  };\r\n\r\n  const handleModalSubmit = () => {\r\n    if (\r\n      AddInput.addName.trim() !== \"\" &&\r\n      AddInput.addEmail.trim() !== \"\" &&\r\n      AddInput.addPosition.trim() !== \"\"\r\n    ) {\r\n      handleSubmit(AddInput.addName, AddInput.addEmail, AddInput.addPosition);\r\n      setAddInput({ addName: \"\", addEmail: \"\", addPosition: \"\" });\r\n      setShow(false);\r\n    } else {\r\n      setIsDataBlank(true);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsDataBlank(false);\r\n    setShow(false);\r\n  };\r\n  const handleShow = () => {\r\n    setShow(true);\r\n    setIsDataBlank(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"dark\" onClick={handleShow}>\r\n        New\r\n      </Button>\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Enter employee details</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div class=\"form-group\">\r\n            <label for=\"exampleInputEmail1\">Name</label>\r\n            <input\r\n              name=\"iname\"\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              value={AddInput.addName}\r\n              placeholder=\"name\"\r\n              onChange={handleInputChange}\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"exampleInputEmail1\">Email</label>\r\n            <input\r\n              name=\"imail\"\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              value={AddInput.addEmail}\r\n              placeholder=\"Email\"\r\n              onChange={handleInputChange}\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"exampleInputEmail1\">position</label>\r\n            <input\r\n              name=\"iposition\"\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              value={AddInput.addPosition}\r\n              placeholder=\"Position\"\r\n              onChange={handleInputChange}\r\n            />\r\n          </div>\r\n          {isDataBlank && (\r\n            <h5 className=\"mx-auto my-3 text-danger\">Can't save on blank</h5>\r\n          )}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleModalSubmit}>\r\n            Add\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Mod;\r\n","export default __webpack_public_path__ + \"static/media/Spin1.90734f22.gif\";","import React, { useState, useEffect } from \"react\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport Pagination from \"./components/Pagination\";\nimport Mod from \"./components/Mod\";\nimport spinner from \"./assets/Spin1.gif\";\n\nfunction App() {\n  const [empData, setEmpData] = useState([]);\n  const [AddInput, setAddInput] = useState({\n    addName: \"\",\n    addEmail: \"\",\n    addPosition: \"\",\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [showPerPage, setShowpPerPage] = useState(4);\n  const [pageSlice, setPageSlice] = useState({ start: 0, end: showPerPage });\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(\"https://609a7fee0f5a13001721b38f.mockapi.io//Employee\").then(\n      (response) => {\n        response.json().then((result) => {\n          setEmpData(result);\n          setIsLoading(false);\n        });\n      }\n    );\n  }, []);\n\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    const name = e.target.name;\n\n    if (name === \"iname\") setAddInput({ ...AddInput, addName: value });\n    else if (name === \"imail\") setAddInput({ ...AddInput, addEmail: value });\n    else setAddInput({ ...AddInput, addPosition: value });\n    console.log(AddInput);\n  };\n\n  const handleSubmit = (name, email, position) => {\n    const data = {\n      Name: name,\n      Email: email,\n      Position: position,\n    };\n\n    setAddInput({ addName: \"\", addEmail: \"\", addPosition: \"\" });\n\n    fetch(\"https://609a7fee0f5a13001721b38f.mockapi.io//Employee\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((result) => result.json())\n      .then((response) => {\n        setEmpData([...empData, response]);\n        alert(\"data submitted\");\n      });\n  };\n\n  return (\n    <div className=\"container text-center \">\n      <h1 className=\"my-5 text-primary\">Employee</h1>\n      <div className=\"row\">\n        {isLoading ? (\n          <div className=\"text-center\">\n            <img src={spinner} alt=\"load\" />\n          </div>\n        ) : (\n          <table className=\"table table table-striped table-bordered\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Id</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Position</th>\n              </tr>\n            </thead>\n            <tbody>\n              {empData.slice(pageSlice.start, pageSlice.end).map((e) => (\n                <tr key={e.id}>\n                  <th scope=\"row\">{e.id}</th>\n                  <td>{e.Name}</td>\n                  <td>{e.Email}</td>\n                  <td>{e.Position}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n      <Pagination\n        setPageSlice={setPageSlice}\n        showPerPage={showPerPage}\n        empData={empData}\n      />\n      <Mod handleSubmit={handleSubmit} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}